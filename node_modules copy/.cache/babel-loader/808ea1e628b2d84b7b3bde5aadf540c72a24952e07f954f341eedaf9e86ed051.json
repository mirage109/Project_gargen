{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  products: [],\n  totalAmount: 0,\n  totalItems: 0 // Добавляем новое поле для общего количества товаров\n};\n\nconst basketSlice = createSlice({\n  name: \"basket\",\n  initialState,\n  reducers: {\n    addToBasket: (state, action) => {\n      const newProduct = action.payload;\n      const existingProduct = state.products.find(product => product.id === newProduct.id);\n      if (existingProduct) {\n        existingProduct.quantity += 1;\n      } else {\n        state.products.push({\n          ...newProduct,\n          quantity: 1\n        });\n      }\n      state.totalAmount += newProduct.price;\n      state.totalItems += 1; // Увеличиваем общее количество товаров при добавлении\n    },\n\n    removeFromBasket: (state, action) => {\n      const productId = action.payload;\n      const removedProduct = state.products.find(product => product.id === productId);\n      if (removedProduct) {\n        state.totalAmount -= removedProduct.price * removedProduct.quantity;\n        state.products = state.products.filter(product => product.id !== productId);\n        state.totalItems -= removedProduct.quantity; // Уменьшаем общее количество товаров при удалении\n      }\n    },\n\n    updateQuantity: (state, action) => {\n      const {\n        itemId,\n        quantity\n      } = action.payload;\n      const existingProduct = state.products.find(product => product.id === itemId);\n      if (existingProduct) {\n        state.totalAmount += existingProduct.price * (quantity - existingProduct.quantity);\n        state.totalItems += quantity - existingProduct.quantity; // Изменяем общее количество товаров при изменении количества\n        existingProduct.quantity = quantity;\n      }\n    }\n  }\n});\nexport const {\n  addToBasket,\n  removeFromBasket,\n  updateQuantity\n} = basketSlice.actions;\nexport default basketSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","products","totalAmount","totalItems","basketSlice","name","reducers","addToBasket","state","action","newProduct","payload","existingProduct","find","product","id","quantity","push","price","removeFromBasket","productId","removedProduct","filter","updateQuantity","itemId","actions","reducer"],"sources":["D:/Project_java/Project_garden/garden/src/redux/basketSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  products: [],\r\n  totalAmount: 0,\r\n  totalItems: 0, // Добавляем новое поле для общего количества товаров\r\n};\r\n\r\nconst basketSlice = createSlice({\r\n  name: \"basket\",\r\n  initialState,\r\n  reducers: {\r\n    addToBasket: (state, action) => {\r\n      const newProduct = action.payload;\r\n      const existingProduct = state.products.find(\r\n        (product) => product.id === newProduct.id\r\n      );\r\n\r\n      if (existingProduct) {\r\n        existingProduct.quantity += 1;\r\n      } else {\r\n        state.products.push({ ...newProduct, quantity: 1 });\r\n      }\r\n      state.totalAmount += newProduct.price;\r\n      state.totalItems += 1; // Увеличиваем общее количество товаров при добавлении\r\n    },\r\n    removeFromBasket: (state, action) => {\r\n      const productId = action.payload;\r\n      const removedProduct = state.products.find(\r\n        (product) => product.id === productId\r\n      );\r\n\r\n      if (removedProduct) {\r\n        state.totalAmount -= removedProduct.price * removedProduct.quantity;\r\n        state.products = state.products.filter(\r\n          (product) => product.id !== productId\r\n        );\r\n        state.totalItems -= removedProduct.quantity; // Уменьшаем общее количество товаров при удалении\r\n      }\r\n    },\r\n    updateQuantity: (state, action) => {\r\n      const { itemId, quantity } = action.payload;\r\n      const existingProduct = state.products.find(\r\n        (product) => product.id === itemId\r\n      );\r\n\r\n      if (existingProduct) {\r\n        state.totalAmount +=\r\n          existingProduct.price * (quantity - existingProduct.quantity);\r\n        state.totalItems += quantity - existingProduct.quantity; // Изменяем общее количество товаров при изменении количества\r\n        existingProduct.quantity = quantity;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addToBasket, removeFromBasket, updateQuantity } =\r\n  basketSlice.actions;\r\n\r\nexport default basketSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,CAAC;EACdC,UAAU,EAAE,CAAC,CAAE;AACjB,CAAC;;AAED,MAAMC,WAAW,GAAGL,WAAW,CAAC;EAC9BM,IAAI,EAAE,QAAQ;EACdL,YAAY;EACZM,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAMC,UAAU,GAAGD,MAAM,CAACE,OAAO;MACjC,MAAMC,eAAe,GAAGJ,KAAK,CAACP,QAAQ,CAACY,IAAI,CACxCC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKL,UAAU,CAACK,EACzC,CAAC;MAED,IAAIH,eAAe,EAAE;QACnBA,eAAe,CAACI,QAAQ,IAAI,CAAC;MAC/B,CAAC,MAAM;QACLR,KAAK,CAACP,QAAQ,CAACgB,IAAI,CAAC;UAAE,GAAGP,UAAU;UAAEM,QAAQ,EAAE;QAAE,CAAC,CAAC;MACrD;MACAR,KAAK,CAACN,WAAW,IAAIQ,UAAU,CAACQ,KAAK;MACrCV,KAAK,CAACL,UAAU,IAAI,CAAC,CAAC,CAAC;IACzB,CAAC;;IACDgB,gBAAgB,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAMW,SAAS,GAAGX,MAAM,CAACE,OAAO;MAChC,MAAMU,cAAc,GAAGb,KAAK,CAACP,QAAQ,CAACY,IAAI,CACvCC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKK,SAC9B,CAAC;MAED,IAAIC,cAAc,EAAE;QAClBb,KAAK,CAACN,WAAW,IAAImB,cAAc,CAACH,KAAK,GAAGG,cAAc,CAACL,QAAQ;QACnER,KAAK,CAACP,QAAQ,GAAGO,KAAK,CAACP,QAAQ,CAACqB,MAAM,CACnCR,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKK,SAC9B,CAAC;QACDZ,KAAK,CAACL,UAAU,IAAIkB,cAAc,CAACL,QAAQ,CAAC,CAAC;MAC/C;IACF,CAAC;;IACDO,cAAc,EAAEA,CAACf,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEe,MAAM;QAAER;MAAS,CAAC,GAAGP,MAAM,CAACE,OAAO;MAC3C,MAAMC,eAAe,GAAGJ,KAAK,CAACP,QAAQ,CAACY,IAAI,CACxCC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKS,MAC9B,CAAC;MAED,IAAIZ,eAAe,EAAE;QACnBJ,KAAK,CAACN,WAAW,IACfU,eAAe,CAACM,KAAK,IAAIF,QAAQ,GAAGJ,eAAe,CAACI,QAAQ,CAAC;QAC/DR,KAAK,CAACL,UAAU,IAAIa,QAAQ,GAAGJ,eAAe,CAACI,QAAQ,CAAC,CAAC;QACzDJ,eAAe,CAACI,QAAQ,GAAGA,QAAQ;MACrC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAET,WAAW;EAAEY,gBAAgB;EAAEI;AAAe,CAAC,GAC5DnB,WAAW,CAACqB,OAAO;AAErB,eAAerB,WAAW,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}